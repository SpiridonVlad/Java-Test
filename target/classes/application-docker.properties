# Docker-specific configuration
# This file is used when SPRING_PROFILES_ACTIVE=docker

# PostgreSQL Configuration (using environment variables)
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=${SPRING_DATASOURCE_DRIVER_CLASS_NAME}

# JPA Configuration
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO}
spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL}
spring.jpa.properties.hibernate.dialect=${SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT}
spring.jpa.properties.hibernate.format_sql=${SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL}

# Server Configuration
server.port=${SERVER_PORT}

# Security Configuration
spring.security.user.name=${SPRING_SECURITY_USER_NAME}
spring.security.user.password=${SPRING_SECURITY_USER_PASSWORD}

# Session Configuration
server.servlet.session.cookie.http-only=${SERVER_SERVLET_SESSION_COOKIE_HTTP_ONLY}
server.servlet.session.cookie.secure=${SERVER_SERVLET_SESSION_COOKIE_SECURE}
server.servlet.session.cookie.same-site=${SERVER_SERVLET_SESSION_COOKIE_SAME_SITE}
server.servlet.session.timeout=${SERVER_SERVLET_SESSION_TIMEOUT}

# Logging
logging.level.com.example.carins=${LOGGING_LEVEL_COM_EXAMPLE_CARINS}
logging.level.org.springframework.security=${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY}

# Docker-specific optimizations
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# Actuator for health checks
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized
